/**
 * @requires RPG.js
 * @requires ../plugins/noisejs/perlin.js
 */
(function (root) {
    /**
     *
     * @param options {object}
     * @constructor
     */
    let Map = function (options) {
        let self = this;
        initialize(self);
        options = options || {};
        self.width = options.width;
        self.height = options.height;
        self.tileWidth = options.tileWidth;
        self.tileHeight = options.tileHeight;
        self.data =  options.data;
        self.loopX = options.loopX;
        self.loopY = options.loopY;
        self.autoGenerated = options.autoGenerated;
        self.regions = options.regions || [];
        self.tiles = options.tiles || [];
    };
    /**
     *
     * @param i {number}
     * @param j {number}
     * @param k {number}
     * @param tile {Tile}
     * @returns {Map}
     */
    Map.prototype.set = function (i, j, k, tile) {
        let self = this;

        if (i < self.height && j < self.width) {
            if (!self.data[i]) {
                self.data[i] = [];
            }

            if(!self.data[i][j]){
                self.data[i][j] = [];
            }

            self.data[i][j][k] = tile;
        }

        return self;
    };

    function getHeight(i,j){
        let nx = i /2000;
        let ny = j /2000;
        let val = 0;
        let e = 0;
        for(let k =1 ; k <= 8;k++){
            e = Math.pow(2,k);
            val += 1/k*noise.perlin2(nx*e,ny*e);
        }
        return Math.abs(val);
    }

    function getRegion(self,height){
        for(let k = 0; k < self.regions.length;k++){
            if(self.regions[k].start <= height && self.regions[k].end >= height){
                return self.regions[k];
            }
        }
        return null;
    }

    function getGeneratedTile(self,i,j){
        let height = getHeight(i,j);
        let region = getRegion(self,height);
        let name = region.tile;
        let tile = null;
        if(self.tiles[name]){
            tile =  self.tiles[name];
        }
        if(region.join){
            let jn = region.join;
            let keys = Object.keys(jn);
            for(let k = 0; k < keys.length;k++){
                let name = keys[k];
                let jd = jn[name];

                if(
                    getRegion(self,i-1,j).name === jd[0] &&
                    getRegion(self,i,j+1).name === jd[1] &&
                    getRegion(self,i+1,j).name === jd[2] &&
                    getRegion(self,i,j-1).name === jd[3]
                ){
                    tile = self.tiles[name];
                    break;
                }
            }
        }
        if(region.layers){
            let keys = Object.keys(region.layers);
            let tiles = [];
            for(let i = 0; i < keys.length;i++){
                let l = keys[i];
                let layer = region.layers[l];
                for(let j = 0; j < layer.length;j++){
                    let t = layer[j];
                    if(self.tiles[t[0]] && t[1] <= height && t[2] >= height){
                        tiles[l] = self.tiles[t[0]];
                    }
                }
            }
            if(tiles.length > 0){
                if(tile){
                    tiles[0] = tile;
                }
                tile = tiles;
            }
        }
        return tile;
    }

    /**
     *
     * @param i {number}
     * @param j {number}
     * @param k {number}
     * @returns {Tile}
     */
    Map.prototype.get = function (i, j, k) {
        let self = this;
        if(self.autoGenerated){
            return getGeneratedTile(self,i,j);
        }
        if(self.data[i] && self.data[i][j]){
            if(k !== undefined && self.data[i][j][k]){
                return self.data[i][j][k];
            }
            else{
                return self.data[i][j];
            }
        }
        return null;
    };

    /**
     *
     * @param i {number}
     * @param j {number}
     * @param k {number}
     */
    Map.prototype.unset = function (i, j, k) {
        let self = this;
        if (self.data[i]  && self.data[i][j]  && self.data[i][j][k]) {
            delete self.data[i][j][k];
        }
    };

    /**
     *
     * @returns {object}
     */
    Map.prototype.toJSON = function(){
        let self = this;
        return [
            self.data,
            self.width,
            self.height,
            self.tileWidth,
            self.tileHeight
        ];
    };

    /**
     *
     * @param self {Map}
     */
    function initialize(self){
        let width = 10;
        let height = 10;
        let tileWidth  = 32;
        let tileHeight = 32;
        let loopX = false;
        let loopY = false;
        let data = [];
        let autoGenerated = false;

        Object.defineProperty(self,'data',{
            get:function(){
                return data;
            },
            set:function(d){
                if(d instanceof Array && d !== data){
                    data = d;
                }
            }
        });

        Object.defineProperty(self,'tileWidth',{
            get:function(){
                return tileWidth;
            },
            set:function(tw){
                tw = parseInt(tw);
                if(!isNaN(tw) && tw >= 0 && tw !== tileWidth){
                    tileWidth = tw;
                }
            }
        });

        Object.defineProperty(self,'tileHeight',{
            get:function(){
                return tileHeight;
            },
            set:function(th){
                th = parseInt(th);
                if(!isNaN(th) && th >= 0 && th !== tileHeight){
                    tileHeight = th;
                }
            }
        });

        Object.defineProperty(self,'width',{
            /**
             *
             * @returns {number}
             */
            get:function(){
                return width;
            },
            /**
             *
             * @param w {number}
             */
            set:function(w){
                w = parseInt(w);
                if(!isNaN(w) && w >= 0 && w !== width){
                    width = w;
                }
            }
        });

        Object.defineProperty(self,'height',{
            /**
             *
             * @returns {number}
             */
            get:function(){
                return height;
            },
            /**
             *
             * @param h {number}
             */
            set:function(h){
                h = parseInt(h);
                if(!isNaN(h) && h >= 0 && h !== height){
                    height = h;
                }
            }
        });

        Object.defineProperty(self,'realWidth',{
            /**
             *
             * @returns {number}
             */
            get:function(){
                return width * tileWidth;
            }
        });

        Object.defineProperty(self,'realHeight',{
            /**
             *
             * @returns {number}
             */
            get:function(){
                return height * tileHeight;
            }
        });


        Object.defineProperty(self,'loopX',{
            get:function(){
                return loopX;
            },
            set:function(l){
                loopX = !!l;
            }
        });

        Object.defineProperty(self,'loopY',{
            get:function(){
                return loopY;
            },
            set:function(l){
                loopY = !!l;
            }
        });

        Object.defineProperty(self,'autoGenerated',{
            get:function(){
                return autoGenerated;
            },
            set:function(a){
                autoGenerated = !!a;
            }
        });
    }

    Object.defineProperty(root,'Map',{
        /**
         *
         * @returns {Map}
         */
        get:function(){
            return Map;
        }
    });
})(RPG);